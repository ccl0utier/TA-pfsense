[pfsense]
TRANSFORMS-pfsense_sourcetyper = pfsense_sourcetyper
SHOULD_LINEMERGE = false

[pfsense:filterlog]
EVAL-bytes_in = if(vendor_direction == "in", bytes,null)
EVAL-bytes_out = if(vendor_direction == "out", bytes,null)
EVAL-dest_interface = coalesce(dest_int,"unknown")
EVAL-direction = case(vendor_direction == "in", "inbound", vendor_direction == "out", "outbound")
EVAL-protocol = lower(coalesce(protocol,transport,vendor_transport,"unknown"))
EVAL-user = coalesce(user,usr,src_user,"unknown")
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-ipv4_carp = filterlog\[\d*\]:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>carp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<carp_type>[^,]*),(?<carp_ttl>[^,]*),(?<vhid>[^,]*),(?<version>[^,]*),(?<advbase>[^,]*),(?<advskew>[^,]*)
EXTRACT-ipv4_icmp_request = filterlog\[\d*\]:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>request),(?<echo_id>\d+),(?<echo_sequence>\d+)
EXTRACT-ipv4_icmp_unreachport = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>unreachport),(?<icmp_dest_ip>[^,]*),(?<unreachable_protocol_id>[^,]*),(?<unreachable_port_data>[^$]+)$
EXTRACT-ipv4_igmp = filterlog\[\d*\]:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>igmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),datalength=(?<data_length>\d+)
EXTRACT-ipv4_pim = filterlog:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>pim),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),datalength=(?<data_length>\d+)
EXTRACT-ipv4_redirect_icmp_unreach_timeexceed = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>redirect|unreach|timexceed),(?<icmp_text>[^$]+)$
EXTRACT-ipv4_tcp = filterlog\[\d*\]:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>tcp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*),(?<vendor_tcp_flags>[^,]*),(?<sequence_number>[^,]*),(?<ack>[^,]*),(?<window>[^,]*),(?<urg>[^,]*),(?<options>[^$]*)$
EXTRACT-ipv4_udp = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>udp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*)
EXTRACT-ipv6-hbh = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),Options,\d+,\d+,(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<extension_header>\w+),
EXTRACT-ipv6_icmp = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>ICMPv6),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),
EXTRACT-ipv6_tcp = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>TCP),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*),(?<vendor_tcp_flags>[^,]*),(?<sequence_number>[^,]*),(?<ack>[^,]*),(?<window>[^,]*),(?<urg>[^,]*),(?<options>[^$]*)$
EXTRACT-ipv6_udp = filterlog\[\d*\]:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>UDP),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*)
FIELDALIAS-pfsense_filterlog_dest = dest_ip AS dest
FIELDALIAS-pfsense_filterlog_src = src_ip AS src
KV_MODE = none
LOOKUP-filterlog_action = pfsense_filter_action vendor_action OUTPUTNEW action
LOOKUP-filterlog_tcpflags = pfsense_filter_tcpflags vendor_tcp_flag OUTPUTNEW tcp_flag
LOOKUP-filterlog_transport = pfsense_filter_transport vendor_transport OUTPUTNEW transport
LOOKUP-pfsense_application_protocols = pfsense_application_protocols dest_port transport OUTPUTNEW app
REPORT-vendor_tcp_flag = pfsense_vendor_tcp_flag

[pfsense:dhcpd]
EVAL-action = lower(vendor_action)
EVAL-app = "pfsense:dhcpd"
EVAL-signature = if(vendor_action == "DHCPREQUEST", "A lease was requested by a client", "A lease was acknowledged by the server")
EVAL-src = host
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-ipv4_dhcp = (?<vendor_action>DHCPACK|DHCPREQUEST|DHCPOFFER) (?:on|for) (?<dest_ip>\S+) (\((?<src_ip>[\d\.]+)\)|)\s*(?:from|to) (?<dest_mac>\S+)(\s\((?<dest_nt_host>.*)\))? via (?<interface>\S+)
EXTRACT-ipv4_dhcp_discover = (?<vendor_action>DHCPDISCOVER) (?:from|to) (?<dest_mac>\S+)(\s\((?<dest_nt_host>.*)\))? via (?<interface>\S+)
EXTRACT-ipv6_dhcp_rebind = dhcpd: Rebind message from (?<dest_mac>\S+) port (?<dest_port>\d+), transaction ID (?<transaction_id>\S+)
EXTRACT-ipv6_dhcp_reply = dhcpd: Sending Reply to (?<dest_mac>\S+) port (?<dest_port>\S+)
LOOKUP-src_ip = dnslookup clienthost as host OUTPUTNEW clientip as src_ip

[pfsense:openvpn]
EVAL-action = coalesce(action,vendor_action,if(errno=53 OR match(_raw, ".*possible active attack.*"), "error", "unknown"))
EVAL-app = "pfsense:openvpn"
EVAL-dest = host
EVAL-ids_type="network"
EVAL-src = coalesce(src,src_ip,"unknown")
EVAL-user = coalesce(user,src_user,usr,"unknown")
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-alt_authentication = openvpn\[\d+\]: .*(?<vendor_action>Peer Connection Initiated)
EXTRACT-authentication = openvpn\[\d+\]: user '(?<user>[^']+)' (?<vendor_action>could not authenticate|authenticated)
EXTRACT-cipher = cipher (?P<cipher>\S+)'
EXTRACT-dhcp-option-DNS = DNS (?P<dest_dns>\S+),
EXTRACT-dhcp-options-DOMAIN = dhcp-option DOMAIN (?P<domain>\S+),
EXTRACT-gateway = route-gateway (?P<gateway>\S+),
EXTRACT-ifconfig = ifconfig (?P<dest_ip>\S+) (?P<subnet_mask>\S+),
EXTRACT-interval = ping (?P<interval>\d+),\S+ (?P<timeout>\d+)
EXTRACT-process_id = \w{3}\s+\d{1,2}\s\d{2}:\d{2}:\d{2}\s+\w+(\[(?<process_id>\d+)\])?:
EXTRACT-route = route (?P<network>\d+\.\d+\.\d+\.\d+) (?P<subnet_mask>\d+\.\d+\.\d+\.\d+)
EXTRACT-signature = openvpn\[\d+\]:\s+(?<signature>.*$)
EXTRACT-src_ip = openvpn\[\d+\]: .*\[AF_INET\](?<src_ip>\S+):(?<src_port>\d+)
EXTRACT-src_ip,src_port = openvpn\[\d+\]:\s+(?<src_ip>\d+\.\d+\.\d+\.\d+):(?<src_port>\d+)
EXTRACT-src_ip,src_port,user,reason = openvpn\[\S+\]: (?P<src_ip>[^:]+):(?P<src_port>\d+).*\[(?<user>\S+)\]\s+(?<reason>Peer Connection Initiated|Inactivity timeout)
EXTRACT-status = status=(?P<status>\d+)
EXTRACT-user,server,src_ip,action = openvpn\[\d+\]: openvpn server '(?<server>[^']+)' user '(?<user>[^']+)' address '(?<src_ip>[^']+)' - (?<action>.*)
EXTRACT-user,src_ip,src_port = openvpn\[\d+\]: (?<user>\S+)\/(?<src_ip>\S+):(?<src_port>\d+)
LOOKUP-openvpn_action = pfsense_openvpn_action vendor_action OUTPUT action

[pfsense:nginx]
EVAL-app = "pfsense:nginx"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pf_nginx = nginx: (?P<dest>[^ ]+) \-(?P<user>[^\s"]*) \- \[(?P<request_time>[^\]]+)[^"\n]*"(?P<http_method>\w+)\s+(?P<url>[^\s"]+)[^ \n]* (?P<http_proto>[^"]+)[^ \n]* (?P<status>[^ ]+)\s+(?P<bytes_out>\d+)[^"\n]*"(?P<http_referrer>[^"]+)(?:[^"\n]*"){2}(?P<http_user_agent>[^"]+)

[pfsense:unbound]
EVAL-app = "pfsense:unbound"
EVAL-dest = coalesce(dest_ip,dest,"unknown")
EVAL-dest_port = coalesce(dest_port,dport,"unknown")
EVAL-message_type = if(LIKE(_raw,"%response for%"),"Response",if(LIKE(_raw,"%reply from%"),"Response",if(LIKE(_raw,"%validator operate%"),"Query",if(LIKE(_raw,"%resolving%"),"Query",if(LIKE(_raw,"%incoming scrubbed packet%"),"Response","unknown")))))
EVAL-reply_code = rcode
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-incoming scrubbed message soa = info: incoming scrubbed packet: ;; ->>HEADER<<- opcode: (?P<opcode>\S+), rcode: (?P<rcode>\S+), id: (?P<id>\d+) ;; flags: (?P<flags>.*); QUERY: (?P<query_count>\d+), ANSWER: (?P<answer_count>\d+), AUTHORITY: (?P<authority_answer_count>\d+), ADDITIONAL: (?P<additional_answer_count>\d+)  ;; QUESTION SECTION: (?P<question>\S+)\.\s+IN\s+(?P<question_type>\S+)  ;; ANSWER SECTION:.*;; AUTHORITY SECTION: (?P<authority>\S+)\.\s+(?P<answer_id>\d+)\s+IN\s+(SOA)\s+(?P<SOA>\S+)\. \S+\. (\d+) (\d+) (\d+) (\d+) (\d+) (\S+)\.\s+(\d+)\s+IN\s+(\S+)\s+SOA (\d+) (\d+) (\d+) (\d+) (\d+) (\d+)
EXTRACT-incoming scrubbed message soa nxdomain = info: incoming scrubbed packet: ;; ->>HEADER<<- opcode: (?P<opcode>\S+), rcode: (?P<rcode>\S+), id: (?P<id>\d+) ;; flags: (?P<flags>.*); QUERY: (?P<query_count>\d+), ANSWER: (?P<answer_count>\d+), AUTHORITY: (?P<authority_answer_count>\d+), ADDITIONAL: (?P<additional_answer_count>\d+)  ;; QUESTION SECTION: (?P<question>\S+)\.\s+IN\s+(?P<question_type>\S+)  ;; ANSWER SECTION:.*;; AUTHORITY SECTION:.*\.\s+\d+\s+IN\s+SOA\s+(?P<SOA>\S+)\. \S+\. (\d+) (\d+) (\d+) (\d+) (\d+) \.\s+\d+\s+IN\s+\S+\s+\S+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+\s+\d+
EXTRACT-incoming scrubbed packet = info: incoming scrubbed packet: ;; ->>HEADER<<- opcode: (?P<opcode>\S+), rcode: (?P<rcode>\S+), id: (?P<id>\d+) ;; flags: (?P<flags>.*); QUERY: (?P<query_count>\d+), ANSWER: (?P<answer_count>\d+), AUTHORITY: (?P<authority_answer_count>\d+), ADDITIONAL: (?P<additional_answer_count>\d+)  ;; QUESTION SECTION: (?P<question>\S+)\.\s+IN\s+(?P<question_type>\S+)  ;; ANSWER SECTION: (?P<answer>\S+)\.\s+(?P<answer_id>\d+)\s+IN\s+(?P<answer_type>\S+)\s+(?P<dest>\S+)  ;; AUTHORITY SECTION:.*;; ADDITIONAL SECTION: ;; MSG SIZE.*rcvd: (?P<recieved>\d+)
EXTRACT-queries = info: resolving\s+(?P<query>\S+)\.\s+(?P<query_type>\S+)\s+.*
EXTRACT-queries1 = info: validator operate: query (?P<query>\S+)\.\s+(?P<query_type>\S+)\s+.*
EXTRACT-reply = info: reply from\s+\S+\s+(?P<src>\d+\.\d+\.\d+\.\d+)#(?P<src_port>\S+)
EXTRACT-response = info: response for (?P<answer>\S+)\s+(?P<record_type>\S+).*
EXTRACT-user action = openvpn \d+ - - user '(?P<user>\S+)' (?P<action>\S+)
FIELDALIAS-dest = dest_ip ASNEW dest

[pfsense:snort]
EVAL-action = coalesce("alert","unknown")
EVAL-app = "pfsense:snort"
EVAL-category = coalesce(classification,category,"unknown")
EVAL-dest = coalesce(dest_ip,dest,"unknown")
EVAL-dvc = coalesce(dvc,host,"unknown")
EVAL-file_hash = coalesce(file_hash,"unknown")
EVAL-file_name = coalesce(file_name,"unknown")
EVAL-file_path = coalesce(file_path,"unknown")
EVAL-ids_type = "network"
EVAL-signature = message
EVAL-src = coalesce(src_ip,src,"unknown")
EVAL-transport = lower(coalesce(transport,"unknown"))
EVAL-user = coalesce(user,"unknown")
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-gid_sid = \[(?P<gid>\d+):(?P<sid>\d+):\d+\]
EXTRACT-pfsense:snort = snort\[(?P<gid>\d+)\]:\s+\[(?P<sid>\d+):\d+:\d+\]\s+(?P<message>.*?)\s+\[\S+\:\s+(?P<classification>.*)\]\s+\[\S+\:\s+(?P<priority>\d+)\]\s+\{(?P<transport>.*)\}\s+(?P<src_ip>\d+\.\d+.\d+.\d+)\:(?P<src_port>\d+)\s+\-\>\s+(?P<dest_ip>\d+\.\d+\.\d+\.\d+)\:(?P<dest_port>\d+)
EXTRACT-pfsense:snort-norports = snort\[(?P<gid>\d+)\]:\s+\[(?P<sid>\d+):\d+\]\s+(?P<message>.*)\s+\[\S+\:\s+(?P<classification>.*)\]\s+\[\S+\:\s+(?P<priority>\d+)\]\s+\{(?P<transport>.*)\}\s+(?P<src_ip>\d+\.\d+.\d+.\d+)\s+\-\>\s+(?P<dest_ip>\d+\.\d+\.\d+\.\d+)
EXTRACT-pfsense:snort-proto = snort\[(?P<gid>\d+)\]:\s+\[(?P<sid>\d+):\d+\]\s+(?P<message>.*)\s+\[\S+\:\s+(?P<classification>.*)\]\s+\[\S+\:\s+(?P<priority>\d+)\]\s+\{PROTO:(?P<proto>\d+)\}\s+(?P<src_ip>\d+\.\d+.\d+.\d+)\s+\-\>\s+(?P<dest_ip>\d+\.\d+\.\d+\.\d+)
FIELDALIAS-pfsense_snort_signature_id = sid AS signature_id
LOOKUP-pfsense_snort_severity = pfsense_snort_severity priority OUTPUTNEW severity

[pfsense:php]
EVAL-app = "pfsense:php"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:php = php\[(?<pid>\d+)\]:\s\[(?P<app>.*)\]\s(?P<message>.*)

[pfsense:php-fpm]
EVAL-action=case(match(_raw, ".*Successful login.*"), "success", match(_raw, ".*authentication error.*"), "failure", 1=1, null())
EVAL-app = "pfsense:php-fpm"
EVAL-dest=host
EVAL-signature=case(match(_raw, ".*Successful login.*"), "session_start", match(_raw, ".*User logged out.*") OR match(_raw, ".*Session timed out.*"), "session_end", 1=1, message)
EVAL-src=src_ip
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:php-fpm = php-fpm\[(?<pid>\d+)\]:\s(?<category>\/.*?):\s(?P<message>.*)
EXTRACT-pfsense:php-fpm:auth = (Successful login|User logged out|Session timed out|webConfigurator authentication error) for user '(?<user>.*)' from: (?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})

[pfsense:syslogd]
EVAL-app = "pfsense:syslogd"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:syslogd = syslogd:\s+(?P<message>\S+)

[pfsense:filterdns]
EVAL-app = "pfsense:filterdns"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:filterdns = filterdns:\s+(?P<message>.*)

[pfsense:/usr/sbin/cron]
EVAL-action = "allowed"
EVAL-app = "pfsense:cron"
EVAL-dest = host
EVAL-os = "FreeBSD 12.2"
EVAL-parent_process_name = case(isnotnull(parent_process_name) AND parent_process_name!="",parent_process_name, isnotnull(parent_process) AND parent_process!="",replace(parent_process,"^\s*([^\s]+).*","\1"),1=1,"unknown")
EVAL-process_exec = process_name
EVAL-user = if(isnull(user) OR user="","unknown", user)
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:/usr/sbin/cron = \s+(?<parent_process>\/usr\/sbin\/cron)\[(?P<process_id>\d+)\]:\s+\((?<user>\w+)\)\s+CMD\s+\((?P<process>.*)\)

[pfsense:dnsmasq]
EVAL-app = "pfsense:dnsmasq"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:dnsmasq = dnsmasq\[\d+\]:\s(?P<message>.*)

[pfsense:ntpd]
EVAL-app = "pfsense:ntpd"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:ntpd = ntpd\[(?<process_id>\d+)\]:\s(?P<message>.*)

[pfsense:miniupnpd]
EVAL-app = "pfsense:miniupnpd"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:miniupnpd = miniupnpd\[(?<process_id>\d+)\]:\s(?P<message>.*)

[pfsense:kernel]
EVAL-app = "pfsense:kernel"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:kernel = kernel:\s(?P<message>.*)

[pfsense:check_reload_status]
EVAL-app = "pfsense:check_reload_status"
EVAL-vendor_product = "Netgate pfSense"
EXTRACT-pfsense:check_reload_status = check_reload_status\[(?<process_id>\d+)\]:\s(?P<message>.*)

[pfsense:reboot]
EXTRACT-pfsense:user = rebooted by\s+(?<user>.*)$
EVAL-action = "modified"
EVAL-change_type = "restart"

